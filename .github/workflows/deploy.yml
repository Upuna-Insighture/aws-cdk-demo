name: Deploy Aurora Serverless V2

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  DB_CLUSTER_IDENTIFIER: aurora-serverless-demo
  DB_MASTER_USERNAME: admin
  DB_NAME: auroradb
  AWS_ROLE_ARN: arn:aws:sts::559050241106:assumed-role/AWSReservedSSO_INS-RnD-Dev-Access_ab7f979b17ebf2f9/upuna.keerawella@insighture.com

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: ${{ env.AWS_ROLE_ARN }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Create .env file
      run: |
        echo "AWS_REGION=${{ env.AWS_REGION }}" > .env
        echo "DB_CLUSTER_IDENTIFIER=${{ env.DB_CLUSTER_IDENTIFIER }}" >> .env
        echo "DB_MASTER_USERNAME=${{ env.DB_MASTER_USERNAME }}" >> .env
        echo "DB_MASTER_PASSWORD=${{ secrets.DB_MASTER_PASSWORD }}" >> .env
        echo "DB_NAME=${{ env.DB_NAME }}" >> .env

    - name: Build TypeScript
      run: npm run build

    - name: Deploy Aurora Cluster
      run: npm start
      env:
        AWS_REGION: ${{ env.AWS_REGION }}

    - name: Store Security Group ID
      id: store-sg
      run: |
        SECURITY_GROUP_ID=$(grep "security group ID" output.log | awk '{print $NF}')
        echo "SECURITY_GROUP_ID=$SECURITY_GROUP_ID" >> $GITHUB_ENV
        echo "::set-output name=security_group_id::$SECURITY_GROUP_ID"

    - name: Upload Deployment Logs
      uses: actions/upload-artifact@v3
      with:
        name: deployment-logs
        path: |
          output.log
          error.log
        if-no-files-found: warn

  cleanup:
    needs: deploy
    if: always()
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: ${{ env.AWS_ROLE_ARN }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Cleanup Resources
      if: ${{ failure() }}
      run: npm run cleanup ${{ env.SECURITY_GROUP_ID }}
      env:
        AWS_REGION: ${{ env.AWS_REGION }} 